<?php
/**
 * @file
 * The Serial module main file.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function serial_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.serial':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Defines serial field type.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function serial_theme() {
  // Register the theme for the serial default.
  return array('serial_default' => array('variables' => array('serial_id' => NULL,),),);
}

/**
 * Theme function for the serial default.
 */
function theme_serial_default(array $variables) {
  return $variables['serial_id'];
}


/**
 * Implements hook_field_formatter_info_alter().
 */
/*
function serial_field_formatter_info_alter(&$info) {
  // @todo review integer / number
  $info['integer']['field_types'][] = 'serial';
}
*/

///**
// * Implements hook_field_create_instance().
// */
// @todo see https://github.com/r-daneelolivaw/serial/issues/10
//function serial_field_create_instance(array $instance) {
//  $field = field_read_field($instance['field_name']);
//
//  if (SERIAL_FIELD_TYPE === $field['type']) {
//    // Create the assistant table:
//    module_load_include('inc', 'serial');
//    _serial_create_table($field, $instance);
//
//    // Set serial values for old objects.
//    $old_count = _serial_init_old_entities($instance['entity_type'], $instance['bundle'], $field['field_name']);
//
//    if ($old_count > 0) {
//      drupal_set_message(t('Serial values have been automatically set for %count existing entities.', array(
//        '%count' => $old_count,
//      )));
//    }
//  }
//}
//
///**
// * Implements hook_field_delete_instance().
// */
//function serial_field_delete_instance(array $instance) {
//  $field = field_read_field($instance['field_name']);
//
//  if (SERIAL_FIELD_TYPE == $field['type']) {
//    // Drop the assistant table.
//    module_load_include('inc', 'serial');
//    _serial_drop_table($field, $instance);
//  }
//}
//
///**
// * Implements hook_field_presave().
// */
//function serial_field_presave($entity_type, $entity, array $field, array $instance, $langcode, array &$items) {
//  if (empty($items)) {
//    module_load_include('inc', 'serial');
//
//    $items[] = array(
//      'value' => _serial_generate_value($entity_type, $instance['bundle'], $field['field_name']),
//    );
//  }
//}

///**
// * Implements hook_clone_node_alter().
// */
//function serial_clone_node_alter(stdClass $node) {
//  // Reset values of all serial fields when cloning a node.
//  foreach (field_info_instances('node', $node->type) as $field_name => $instance) {
//    $info = field_info_field($field_name);
//
//    if ('serial' === $info['type']) {
//      $node->{$field_name} = array();
//    }
//  }
//}